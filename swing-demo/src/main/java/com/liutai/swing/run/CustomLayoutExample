package com.liutai.swing.run;

import com.liutai.swing.run.component.TextLineNumber;
import com.liutai.swing.run.utils.FileUtil;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreePath;
import java.awt.*;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;

public class CustomLayoutExample {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            JFrame frame = new JFrame("xiaomixiazi");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            BufferedImage read = null;
            try {
                URL resource = CustomLayoutExample.class.getClassLoader().getResource("icon/icon-Mute On.png");
                assert resource != null;
                read = ImageIO.read(resource);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            frame.setIconImage(read);
            frame.setSize(screenSize.getSize());
            frame.setLayout(new GridBagLayout());
            GridBagConstraints gbc = new GridBagConstraints();

            // ========== 创建菜单栏 ==========
            JMenuBar menuBar = new JMenuBar();

            // ----- 文件菜单 -----
            JMenu fileMenu = new JMenu("File");
            fileMenu.setMnemonic('F'); // 快捷键：Alt+F
            fileMenu.setFont(new Font("微软雅黑", Font.BOLD, 14));
            fileMenu.setBackground(Color.decode("#45403E")); // 菜单栏背景
            fileMenu.setMargin(new Insets(1, 1, 1, 1));
            // 关键：修改选中时的背景和前景色
            fileMenu.setOpaque(true);
            fileMenu.setBackground(Color.decode("#F3F2F2"));
            fileMenu.setForeground(Color.decode("#3D3838"));

            JMenuItem newItem = new JMenuItem("New");
            newItem.setMnemonic('N');
            newItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_DOWN_MASK));
            newItem.addActionListener(e -> JOptionPane.showMessageDialog(frame, "新建文件"));

            JMenuItem openItem = new JMenuItem("Open...");
            openItem.setMnemonic('O');
            openItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, InputEvent.CTRL_DOWN_MASK));
            openItem.addActionListener(e -> {
                JFileChooser fileChooser = new JFileChooser();
                fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
                // 设置标题
                fileChooser.setDialogTitle("请选择要打开的文件");
                // 设置为“打开”模式（默认）
                fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY); // 只能选择文件
                // 显示对话框
                int result = fileChooser.showOpenDialog(frame);
                // 用户点击“打开”
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    System.out.println("选择的文件: " + selectedFile.getAbsolutePath());
                    // 在这里处理文件，例如读取内容
                    // openFile(selectedFile);
                }
            });

            JMenuItem saveItem = new JMenuItem("Save");
            saveItem.setMnemonic('S');
            saveItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, InputEvent.CTRL_DOWN_MASK));
            saveItem.addActionListener(e -> JOptionPane.showMessageDialog(frame, "保存文件"));

            JMenuItem exitItem = new JMenuItem("Exist");
            exitItem.setMnemonic('X');
            exitItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q, InputEvent.CTRL_DOWN_MASK));
            exitItem.addActionListener(e -> System.exit(0));

            fileMenu.add(newItem);
            fileMenu.add(openItem);
            fileMenu.add(saveItem);
            fileMenu.addSeparator();
            fileMenu.add(exitItem);


            // ----- Help菜单 -----
            JMenu helpMenu = new JMenu("Help");
            helpMenu.setFont(new Font("Microsoft YaHei", Font.BOLD, 14));
            helpMenu.setBackground(Color.decode("#45403E")); // 菜单栏背景
            helpMenu.setMargin(new Insets(1, 1, 1, 1));
            helpMenu.setOpaque(true);
            helpMenu.setBackground(Color.decode("#F3F2F2"));
            helpMenu.setForeground(Color.decode("#3D3838"));

            // ----- Help菜单 -----
            JMenu editMenu = new JMenu("Edit");
            editMenu.setFont(new Font("Microsoft YaHei", Font.BOLD, 14));
            editMenu.setBackground(Color.decode("#45403E")); // 菜单栏背景
            editMenu.setMargin(new Insets(1, 1, 1, 1));
            editMenu.setOpaque(true);
            editMenu.setBackground(Color.decode("#F3F2F2"));
            editMenu.setForeground(Color.decode("#3D3838"));

            // ----- Help菜单 -----
            JMenu viewMenu = new JMenu("View");
            viewMenu.setFont(new Font("Microsoft YaHei", Font.BOLD, 14));
            viewMenu.setBackground(Color.decode("#45403E")); // 菜单栏背景
            viewMenu.setMargin(new Insets(1, 1, 1, 1));
            viewMenu.setOpaque(true);
            viewMenu.setBackground(Color.decode("#F3F2F2"));
            viewMenu.setForeground(Color.decode("#3D3838"));
            // 设置菜单栏
            menuBar.add(fileMenu);
            menuBar.add(editMenu);
            menuBar.add(viewMenu);
            menuBar.add(helpMenu);
            frame.setJMenuBar(menuBar);

            // ==================== 左侧区域 ====================
            JPanel leftPanel = new JPanel(new BorderLayout());
            leftPanel.setBackground(Color.decode("#827D7D"));
            leftPanel.setBorder(BorderFactory.createLineBorder(Color.black, 1));

            // ==================== 中间区域 ====================
            JPanel centerPanel = new JPanel(new BorderLayout());
            centerPanel.setBackground(Color.decode("#827D7D"));
            centerPanel.setBorder(BorderFactory.createLineBorder(Color.black, 1));

            // ==================== 右区域 ====================
            JPanel rightPanel = new JPanel();
            rightPanel.setBackground(Color.decode("#827D7D"));
            rightPanel.setBorder(BorderFactory.createLineBorder(Color.black, 1));

            // ==================== 下方区域（跨左右中） ====================
            JPanel bottomPanel = new JPanel();
            bottomPanel.setBackground(Color.decode("#827D7D"));
            bottomPanel.setBorder(BorderFactory.createLineBorder(Color.black, 1));

            // =======================================
            JTextArea contentArea = new JTextArea();
            contentArea.setRows(50);
            contentArea.setColumns(50);
            contentArea.setFont(new Font("微软雅黑", Font.PLAIN, 16));
            contentArea.setEditable(false);
            contentArea.setLineWrap(false);
            contentArea.setWrapStyleWord(true);
            contentArea.setForeground(Color.decode("#EDE1E1"));
            contentArea.setCaretColor(Color.decode("#EDE1E1"));
            contentArea.setBackground(Color.decode("#45403E"));
            contentArea.setMargin(new Insets(0, 5, 0, 5));

            JTree fileTree = FileUtil.createFileTree();
            fileTree.addTreeSelectionListener(e -> {
                TreePath path = e.getPath();
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) path.getLastPathComponent();
                Object userObject = node.getUserObject();

                if (userObject instanceof FileUtil.FileNode) {
                    File file = ((FileUtil.FileNode) userObject).getFile();
                    if (file.isFile()) {
                        FileUtil.displayFileContent(contentArea, file);
                    } else {
                        contentArea.setText("");
                    }
                }
            });
            // 添加滚动条
            fileTree.setBackground(contentArea.getBackground());
            fileTree.setCellRenderer(new DefaultTreeCellRenderer() {
                @Override
                public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
                    super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);
                    setOpaque(true);
                    Font font = contentArea.getFont();
                    setFont(new Font(font.getName(), font.getStyle(), font.getSize() - 2));
                    setForeground(contentArea.getForeground());
                    setBorder(new EmptyBorder(2, 5, 2, 5));
                    return this;
                }
            });
            JScrollPane scrollPane = new JScrollPane(fileTree);
            scrollPane.setMaximumSize(leftPanel.getPreferredSize());
            scrollPane.setMinimumSize(leftPanel.getPreferredSize());
            scrollPane.getViewport().setBackground(contentArea.getBackground());
            scrollPane.getViewport().setOpaque(true);
            scrollPane.setOpaque(false);
            scrollPane.setPreferredSize(new Dimension(8, 32));
            scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scrollPane.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.LIGHT_GRAY),
                    BorderFactory.createEmptyBorder(2, 2, 2, 2)
            ));
            leftPanel.add(scrollPane, BorderLayout.CENTER);
            frame.add(leftPanel, gbc);

            // 创建带行号的文本组件
            TextLineNumber textLineNumber = new TextLineNumber();
            textLineNumber.setTextArea(contentArea);
            JScrollPane contentScrollPane = new JScrollPane(contentArea);
            contentScrollPane.setOpaque(false);
            contentScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
            contentScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            contentScrollPane.setBorder(BorderFactory.createMatteBorder(1, 0, 1, 0, Color.LIGHT_GRAY));
            contentScrollPane.setRowHeaderView(textLineNumber);
            contentScrollPane.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createLineBorder(Color.LIGHT_GRAY),
                    BorderFactory.createEmptyBorder(2, 2, 2, 2)
            ));
            centerPanel.add(contentScrollPane, BorderLayout.CENTER);

            gbc.gridx = 0;
            gbc.gridy = 0;
            gbc.gridwidth = 1;
            gbc.gridheight = 1;
            gbc.weightx = 0.15;
            gbc.weighty = 0.75;
            gbc.fill = GridBagConstraints.BOTH;

            frame.add(leftPanel, gbc);
            gbc.gridx = 1;
            gbc.gridy = 0;
            gbc.gridwidth = 1;
            gbc.gridheight = 1;
            gbc.weightx = 0.70; // 剩余宽度
            gbc.weighty = 0.75;
            gbc.fill = GridBagConstraints.BOTH;

            frame.add(centerPanel, gbc);
            gbc.gridx = 2;
            gbc.gridy = 0;
            gbc.gridwidth = 1;
            gbc.gridheight = 1;
            gbc.weightx = 0.15;
            gbc.weighty = 0.75;
            gbc.fill = GridBagConstraints.BOTH;
            frame.add(rightPanel, gbc);

            gbc.gridx = 0;
            gbc.gridy = 1;
            gbc.gridwidth = 3;
            gbc.gridheight = 1;
            gbc.weightx = 1.0;
            gbc.weighty = 0.25;
            gbc.fill = GridBagConstraints.BOTH;
            frame.add(bottomPanel, gbc);
            // 显示窗口
            frame.setVisible(true);
        });
    }
}
